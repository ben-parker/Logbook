// <auto-generated />
using System;
using Logbook.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Logbook.Migrations
{
    [DbContext(typeof(LogbookDBContext))]
    partial class LogbookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Logbook.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Logbook.Models.Done", b =>
                {
                    b.Property<int>("DoneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompletedDate");

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime?>("DueDate");

                    b.Property<int>("TrackedId");

                    b.HasKey("DoneId");

                    b.HasIndex("TrackedId");

                    b.ToTable("Done");
                });

            modelBuilder.Entity("Logbook.Models.Tracked", b =>
                {
                    b.Property<int>("TrackedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<bool>("Complete");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsRecurring");

                    b.Property<bool>("Remind");

                    b.HasKey("TrackedId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tracked");
                });

            modelBuilder.Entity("Logbook.Models.Done", b =>
                {
                    b.HasOne("Logbook.Models.Tracked", "Tracked")
                        .WithMany("Done")
                        .HasForeignKey("TrackedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Logbook.Models.Tracked", b =>
                {
                    b.HasOne("Logbook.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Logbook.Models.Recurrence", "Recurrence", b1 =>
                        {
                            b1.Property<int?>("TrackedId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("RecurString")
                                .HasColumnName("RecurString");

                            b1.ToTable("Tracked");

                            b1.HasOne("Logbook.Models.Tracked")
                                .WithOne("Recurrence")
                                .HasForeignKey("Logbook.Models.Recurrence", "TrackedId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
